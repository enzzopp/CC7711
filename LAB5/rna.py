# -*- coding: utf-8 -*-
"""RNA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1STiWJfWwl5amTuOEk7L5HjXCKPdfsy6X
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.neural_network import MLPRegressor
import warnings
from sklearn.exceptions import ConvergenceWarning

# Ignorar avisos de não convergência
warnings.filterwarnings("ignore", category=ConvergenceWarning)

"""# **Teste_2**

"""

print('Carregando Arquivo de teste')
arquivo = np.load('teste2.npy')
x = arquivo[0]
y = np.ravel(arquivo[1])

iterations = (1000, 100, 10000)
hidden_layers = ((10, 5), (15, 5), (2))
losses = []
models = []

for _ in range(10):
    for i in range(3):
        regr = MLPRegressor(hidden_layer_sizes=hidden_layers[i],
                            max_iter=iterations[i],
                            activation='relu', # {'identity', 'logistic', 'tanh', 'relu'}
                            solver='adam',
                            learning_rate='adaptive',
                            n_iter_no_change=500)
        regr.fit(x, y)
        losses.append(regr.best_loss_)
        models.append(regr)

best_models = sorted(models, key=lambda m: m.best_loss_)[:3]

print('Melhores modelos:')
for i in range(3):
  print(f'Modelo {i+1}:')
  print(f'Loss: {best_models[i].best_loss_}')
  print(f'Iterações: {best_models[i].n_iter_}')
  print(f'Layers: {best_models[i].hidden_layer_sizes}')
  print(f'Iterações: {best_models[i].max_iter}')
  print(f'Função de ativação: {best_models[i].activation}')
  print(f'Solver: {best_models[i].solver}')
  print(f'Learning rate: {best_models[i].learning_rate}')
  print(f'Iterações sem melhora: {best_models[i].n_iter_no_change}')
  print('----------------------------------')


media = np.mean(losses)
desvio_padrao = np.std(losses)

print(f'Média losses: {media}')
print(f'Desvio padrão dos losses: {desvio_padrao}')

for i in range(3):
  y_est = best_models[i].predict(x)

  plt.figure(figsize=[10,5])

  #plot regressor
  plt.subplot(1,3,3)
  plt.plot(x,y,linewidth=1,color='yellow')
  plt.plot(x,y_est,linewidth=2)

  plt.show()

"""# **Teste_3**

"""

print('Carregando Arquivo de teste')
arquivo = np.load('teste3.npy')
x = arquivo[0]
y = np.ravel(arquivo[1])

iterations = (1000, 10000, 100)
hidden_layers = ((10, 5), (15, 10, 5), (2))
losses = []
models = []

for _ in range(10):
    for i in range(3):
        regr = MLPRegressor(hidden_layer_sizes=hidden_layers[i],
                            max_iter=iterations[i],
                            activation='relu', # {'identity', 'logistic', 'tanh', 'relu'}
                            solver='adam',
                            learning_rate='adaptive',
                            n_iter_no_change=1000)
        regr.fit(x, y)
        losses.append(regr.best_loss_)
        models.append(regr)

best_models = sorted(models, key=lambda m: m.best_loss_)[:3]

print('Melhores modelos:')
for i in range(3):
  print(f'Modelo {i+1}:')
  print(f'Loss: {best_models[i].best_loss_}')
  print(f'Iterações: {best_models[i].n_iter_}')
  print(f'Layers: {best_models[i].hidden_layer_sizes}')
  print(f'Iterações: {best_models[i].max_iter}')
  print(f'Função de ativação: {best_models[i].activation}')
  print(f'Solver: {best_models[i].solver}')
  print(f'Learning rate: {best_models[i].learning_rate}')
  print(f'Iterações sem melhora: {best_models[i].n_iter_no_change}')
  print('----------------------------------')


media = np.mean(losses)
desvio_padrao = np.std(losses)

print(f'Média losses: {media}')
print(f'Desvio padrão dos losses: {desvio_padrao}')

for i in range(3):
  y_est = best_models[i].predict(x)

  plt.figure(figsize=[10,5])

  #plot regressor
  plt.subplot(1,3,3)
  plt.plot(x,y,linewidth=1,color='yellow')
  plt.plot(x,y_est,linewidth=2)

  plt.show()

"""# **Teste_4**

"""

print('Carregando Arquivo de teste')
arquivo = np.load('teste4.npy')
x = arquivo[0]
y = np.ravel(arquivo[1])

iterations = (1000, 10000, 100)
hidden_layers = ((10, 5), (15, 10, 5), (2))
losses = []
models = []
best_models = []

for _ in range(10):
    for i in range(3):
        regr = MLPRegressor(hidden_layer_sizes=hidden_layers[i],
                            max_iter=iterations[i],
                            activation='relu', # {'identity', 'logistic', 'tanh', 'relu'}
                            solver='adam',
                            learning_rate='adaptive',
                            n_iter_no_change=500)
        regr.fit(x, y)
        losses.append(regr.best_loss_)
        models.append(regr)

best_models = sorted(models, key=lambda m: m.best_loss_)[:3]

print('Melhores modelos:')
for i in range(3):
  print(f'Modelo {i+1}:')
  print(f'Loss: {best_models[i].best_loss_}')
  print(f'Iterações: {best_models[i].n_iter_}')
  print(f'Layers: {best_models[i].hidden_layer_sizes}')
  print(f'Iterações: {best_models[i].max_iter}')
  print(f'Função de ativação: {best_models[i].activation}')
  print(f'Solver: {best_models[i].solver}')
  print(f'Learning rate: {best_models[i].learning_rate}')
  print(f'Iterações sem melhora: {best_models[i].n_iter_no_change}')
  print('----------------------------------')


media = np.mean(losses)
desvio_padrao = np.std(losses)

print(f'Média losses: {media}')
print(f'Desvio padrão dos losses: {desvio_padrao}')

for i in range(3):
  y_est = best_models[i].predict(x)

  plt.figure(figsize=[10,5])

  #plot regressor
  plt.subplot(1,3,3)
  plt.plot(x,y,linewidth=1,color='yellow')
  plt.plot(x,y_est,linewidth=2)

  plt.show()

"""# **Teste_5**

"""

from sklearn.preprocessing import MaxAbsScaler
print('Carregando Arquivo de teste')
arquivo = np.load('teste5.npy')
x = arquivo[0]
scale = MaxAbsScaler().fit(arquivo[1])
y = np.ravel(scale.transform(arquivo[1]))

losses = []
models = []

for _ in range(10):
  regr = MLPRegressor(hidden_layer_sizes=(120, 60, 40),
                      max_iter=15000,
                      activation='tanh',  # {'identity', 'logistic', 'tanh', 'relu'}
                      solver='adam',  # {'lbfgs', 'sgd', 'adam'}
                      learning_rate='adaptive',
                      n_iter_no_change=15000,
                      verbose=False)

  regr.fit(x, y)
  losses.append(regr.best_loss_)
  models.append(regr)

best_models = sorted(models, key=lambda m: m.best_loss_)[:3]

print('Melhores modelos:')
for i in range(3):
  print(f'Modelo {i+1}:')
  print(f'Loss: {best_models[i].best_loss_}')
  print(f'Iterações: {best_models[i].n_iter_}')
  print(f'Layers: {best_models[i].hidden_layer_sizes}')
  print(f'Iterações: {best_models[i].max_iter}')
  print(f'Função de ativação: {best_models[i].activation}')
  print(f'Solver: {best_models[i].solver}')
  print(f'Learning rate: {best_models[i].learning_rate}')
  print(f'Iterações sem melhora: {best_models[i].n_iter_no_change}')
  print('----------------------------------')


media = np.mean(losses)
desvio_padrao = np.std(losses)

print(f'Média losses: {media}')
print(f'Desvio padrão dos losses: {desvio_padrao}')

for i in range(3):
  y_est = best_models[i].predict(x)

  plt.figure(figsize=[10,5])

  #plot regressor
  plt.subplot(1,3,3)
  plt.plot(x,y,linewidth=1,color='yellow')
  plt.plot(x,y_est,linewidth=2)

  plt.show()